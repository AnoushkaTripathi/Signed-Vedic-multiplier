`timescale 1ns / 1ps

module half_adder(sum,carry , a , b);
input a,b;
output sum,carry;
xor x1(sum,a,b);
and a1(carry, a,b);
 endmodule
 module full_adder(sum, carry , a , b , cin );
input a,b,cin;
output sum,carry;
wire t1,t2;
wire c1,c2;
half_adder h1(t1,c1,a,b);
half_adder h2(sum,c2,t1,cin) ;
or r1 (carry, c2,c1);
 endmodule
 module paraller_4bit_adder(sout , cout , a , b ,
cin );
input [3:0] a,b;
input cin;
output [3:0] sout;
output cout;
wire [2:0]t;
full_adder f1( sout[0], t[0] , a[0] , b[0]
,cin);
full_adder f2( sout[1], t[1] , a[1] , b[1]
,t[0]);
full_adder f3( sout[2], t[2] , a[2] , b[2]
,t[1]);
full_adder f4( sout[3], cout , a[3] , b[3]
,t[2]);
 endmodule
module parallel_8bit_adder(sum, carry, a , b,
cin );
input cin;
input [7:0] a,b;
output [7:0] sum;
output carry;
wire temp;
paraller_4bit_adder p1( sum[3:0], temp ,
a[3:0] , b[3:0] , cin);
paraller_4bit_adder p2( sum[7:4], carry ,
a[7:4] , b[7:4] , temp);
 endmodule

module vedic_2bit_mul(a , b , out);
 input [1:0] a,b;
 output reg [3:0] out;
 always @( a or b)
 begin
 out[0] <= a[0] && b[0] ;
 out[1] <= (a[0] && b[1])^( a[1] && b[0]);
 out[2] <= (a[1]&& b[1])^((a[0] &&
b[1])&&( a[1] && b[0]));
 out[3] <= (a[1]&& b[1])&&((a[0] &&
b[1])&&( a[1] && b[0])) ;
 end
 endmodule
module vedic_4bit_mul( p, a, b);
input [3:0] a,b;
output [7:0] p;
wire [3:0] t1,t2,t3,t4;
vedic_2bit_mul m1( .a(a[1:0]) , .b(b[1:0])
, .out(t1));
vedic_2bit_mul m2( .a(a[3:2]) , .b(b[1:0])
, .out(t2));
vedic_2bit_mul m3( .a(a[1:0]) , .b(b[3:2])
, .out(t3));
vedic_2bit_mul m4( .a(a[3:2]) , .b(b[3:2])
, .out(t4));
assign p[1:0]=t1[1:0];
wire [3:0] cout1;
wire [3:0] temp1,temp2,temp3;
paraller_4bit_adder r1( temp1, cout1[0],
{2'b0,t1[3:2]}, t2, 1'b0);
paraller_4bit_adder r2( temp2, cout1[1],
temp1, t3, 1'b0);
assign p[3:2] = temp2[1:0];
wire s,c1;
full_adder f1( s ,c1 ,cout1[0] ,cout1[1] ,
1'b0);
paraller_4bit_adder
r3(temp3,cout1[2],{c1,s,temp2[3:2]}, t4 , 1'b0);
assign p[7:4] = temp3;
 endmodule

module vedic_8bit_mul(p , a, b );
input [7:0] a,b;
  output [15:0] p;
wire [7:0] t1,t2,t3,t4;
  wire a1=0;
reg signedbit;

vedic_4bit_mul m1( .a(a[3:0]) , .b(b[3:0])
, .p(t1));
vedic_4bit_mul m2( .a(a[7:4]) , .b(b[3:0])
, .p(t2));
vedic_4bit_mul m3( .a(a[3:0]) , .b(b[7:4])
, .p(t3));
vedic_4bit_mul m4( .a(a[7:4]) , .b(b[7:4])
, .p(t4));
assign p[3:0]=t1[3:0];
wire [3:0] cout1;
wire [7:0] temp1,temp2,temp3;
parallel_8bit_adder r1( temp1, cout1[0],
{4'b0,t1[7:4]}, t2, 1'b0);
parallel_8bit_adder r2( temp2, cout1[1],
temp1, t3, 1'b0);
assign p[7:4] = temp2[3:0];
wire s,c1;
full_adder f1( s ,c1 ,cout1[0] ,cout1[1] ,
1'b0);
parallel_8bit_adder
r3(temp3,cout1[2],{2'b00,c1,s,temp2[7:4]}, t4 ,
1'b0);
  assign {a1,p[14:8]} = temp3;
  always@(*)
begin
  if(a[7]!=b[7])
begin
signedbit=1;
end
else
begin
signedbit=0;
end
end
  assign p[15] = signedbit;

 endmodule
-----------------------------------------------------------
Testbench 



`timescale 1ns / 1ps
module test_vedic_8;

  reg signed[7:0] a;
  reg signed[7:0] b;

  wire signed [15:0] c;
reg signed [15:0] prod;
integer i;

// Instantiate the Unit Under Test (UUT)
vedic_8bit_mul uut (
.a(a),
.b(b),
.p(c)
);

initial begin


  for (i = 0; i < 10; i = i + 1) begin
a = $random;
b = $random;
 
#30;

$display("%t  a = %d and b = %d c = %d ", $time, a, b, c);
end
end

endmodule
